function renderPageContent(targetSection) {
    const contentDivs = document.querySelectorAll('.content');
    const defaultSection = document.querySelector('.default');
    
    contentDivs.forEach(div => {

        if (defaultSection) {
            defaultSection.style.display = 'none';
            defaultSection.classList.remove('default');
        } else {

            div.style.display = 'none';
        }

        // console.log(div.getAttribute('id') === 'project');
        // if(div.getAttribute('id') === 'project') {
        //     return div.style.display = 'block';
        // } else {
        //     return div.style.display = 'none';
        // }
    });

    targetSection.style.display = 'block';
    
    // Set initial display
    // const defaultSection = document.querySelector('.default');
    // defaultSection.style.display = 'block';
    // Hide the default section if it has the 'default' class
    // const defaultSection = document.querySelector('.default');
    // if (defaultSection) {
    //     defaultSection.style.display = 'none';
    //     defaultSection.classList.remove('default');
    // }
}
(function() {
    // const sidebarLinks = document.querySelectorAll('#sidebar a');
    const sidebarLinks = document.querySelectorAll('#nav li a');
    // const defaultLink = document.getElementById('#default');

    // defaultLink.addEventListener('click', () => {
    //     defaultSection.style.display = 'block';
    // });

    sidebarLinks.forEach(link => {
        link.addEventListener('click', handleLinkClick);
    });

    function handleLinkClick(event) {
        event.preventDefault();
        
        const hrefValue = this.getAttribute('href');
        const removeHash = hrefValue.replace('#', '');
        // console.log(hrefValue);
        const targetSection = document.querySelector(this.getAttribute('href'));
        renderPageContent(targetSection);
        initialize(removeHash);
    }
})();
document.addEventListener('DOMContentLoaded', function(){
    initialize();
    fetchItem();
    // console.log(fetchService);
}); 

function fetchItem() {
    return fetch('../data/main.json')
        .then(res => res.json())
        .catch(err => {
            console.log('Error fetching data:', err);
            throw err;
        });
}



function initialize(link) {
    const projectContainer = document.getElementById('projectContainer');
    const aboutContainer = document.getElementById('aboutContainer');

    // console.log(link)
    fetchItem()
        .then(data => {
            // Process the JSON data
            const html = generateHTML(data, link);
            // Update the HTML container
            console.log(link)
            projectContainer.innerHTML = html;
        })
        .catch(err => {
            // Handle any errors
            console.error('Error initializing:', err);
        });
}


function generateHTML(data, link) {
    let html = '';

    const dataArray = [];
    for(let i=0; i<data.length; i++) {
        // const d = data[i];
        dataArray.push(data[i]);
    }
    // console.log(dataArray);
    // dataArray[0].project.map((item) => {
    //     html += `<li>${item.title}</li>`;
    // })

    dataArray.map((item) => {
        console.log(item.project)
    })


    // if(link == '#project') {
    //     // console.log(dataArray)
    //     dataArray[0].project.map((item) => {
    //         html += `<li>${item.title}</li>`;
    //     })
        
    // }
    
    // if(link == '#about') {
    //     // console.log(dataArray[1].about.text)
    //     html += `<li>${dataArray[1].about.text}</li>`;
    // }
    
    // else {
    //     html += ''
    // }
    // for(let item of data) {
    //     console.log(item.project)
    //     // html += `<li>${item.title}</li>`;
    // }
    return html;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jb250ZW50LmpzIiwiX3NpZGViYXIuanMiLCJtYWluLmpzIiwiYXBpL2RhdGFTZXJ2aWNlLmpzIiwiYXBpL2ZldGNoU2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNWQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclBhZ2VDb250ZW50KHRhcmdldFNlY3Rpb24pIHtcbiAgICBjb25zdCBjb250ZW50RGl2cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250ZW50Jyk7XG4gICAgY29uc3QgZGVmYXVsdFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVmYXVsdCcpO1xuICAgIFxuICAgIGNvbnRlbnREaXZzLmZvckVhY2goZGl2ID0+IHtcblxuICAgICAgICBpZiAoZGVmYXVsdFNlY3Rpb24pIHtcbiAgICAgICAgICAgIGRlZmF1bHRTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBkZWZhdWx0U2VjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdkZWZhdWx0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coZGl2LmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gJ3Byb2plY3QnKTtcbiAgICAgICAgLy8gaWYoZGl2LmdldEF0dHJpYnV0ZSgnaWQnKSA9PT0gJ3Byb2plY3QnKSB7XG4gICAgICAgIC8vICAgICByZXR1cm4gZGl2LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgcmV0dXJuIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAvLyB9XG4gICAgfSk7XG5cbiAgICB0YXJnZXRTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIFxuICAgIC8vIFNldCBpbml0aWFsIGRpc3BsYXlcbiAgICAvLyBjb25zdCBkZWZhdWx0U2VjdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWZhdWx0Jyk7XG4gICAgLy8gZGVmYXVsdFNlY3Rpb24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgLy8gSGlkZSB0aGUgZGVmYXVsdCBzZWN0aW9uIGlmIGl0IGhhcyB0aGUgJ2RlZmF1bHQnIGNsYXNzXG4gICAgLy8gY29uc3QgZGVmYXVsdFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVmYXVsdCcpO1xuICAgIC8vIGlmIChkZWZhdWx0U2VjdGlvbikge1xuICAgIC8vICAgICBkZWZhdWx0U2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIC8vICAgICBkZWZhdWx0U2VjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdkZWZhdWx0Jyk7XG4gICAgLy8gfVxufSIsImltcG9ydCB7IHJlbmRlclBhZ2VDb250ZW50IH0gZnJvbSAnLi9fY29udGVudC5qcyc7XG5pbXBvcnQgeyBpbml0aWFsaXplIH0gZnJvbSAnLi9hcGkvZmV0Y2hTZXJ2aWNlLmpzJztcblxuKGZ1bmN0aW9uKCkge1xuICAgIC8vIGNvbnN0IHNpZGViYXJMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNzaWRlYmFyIGEnKTtcbiAgICBjb25zdCBzaWRlYmFyTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbmF2IGxpIGEnKTtcbiAgICAvLyBjb25zdCBkZWZhdWx0TGluayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCcjZGVmYXVsdCcpO1xuXG4gICAgLy8gZGVmYXVsdExpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgLy8gICAgIGRlZmF1bHRTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIC8vIH0pO1xuXG4gICAgc2lkZWJhckxpbmtzLmZvckVhY2gobGluayA9PiB7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVMaW5rQ2xpY2spO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlTGlua0NsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBocmVmVmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICBjb25zdCByZW1vdmVIYXNoID0gaHJlZlZhbHVlLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGhyZWZWYWx1ZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJykpO1xuICAgICAgICByZW5kZXJQYWdlQ29udGVudCh0YXJnZXRTZWN0aW9uKTtcbiAgICAgICAgaW5pdGlhbGl6ZShyZW1vdmVIYXNoKTtcbiAgICB9XG59KSgpOyIsImltcG9ydCB7IGluaXRpYWxpemUgfSBmcm9tICcuL2FwaS9mZXRjaFNlcnZpY2UnO1xuaW1wb3J0IHsgZmV0Y2hJdGVtIH0gZnJvbSAnLi9hcGkvZGF0YVNlcnZpY2UnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKXtcbiAgICBpbml0aWFsaXplKCk7XG4gICAgZmV0Y2hJdGVtKCk7XG4gICAgLy8gY29uc29sZS5sb2coZmV0Y2hTZXJ2aWNlKTtcbn0pOyAiLCJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaEl0ZW0oKSB7XG4gICAgcmV0dXJuIGZldGNoKCcuLi9kYXRhL21haW4uanNvbicpXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBmZXRjaGluZyBkYXRhOicsIGVycik7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0pO1xufVxuXG4iLCJcbmltcG9ydCB7IGZldGNoSXRlbSB9IGZyb20gXCIuL2RhdGFTZXJ2aWNlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKGxpbmspIHtcbiAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RDb250YWluZXInKTtcbiAgICBjb25zdCBhYm91dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhYm91dENvbnRhaW5lcicpO1xuXG4gICAgLy8gY29uc29sZS5sb2cobGluaylcbiAgICBmZXRjaEl0ZW0oKVxuICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIC8vIFByb2Nlc3MgdGhlIEpTT04gZGF0YVxuICAgICAgICAgICAgY29uc3QgaHRtbCA9IGdlbmVyYXRlSFRNTChkYXRhLCBsaW5rKTtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgSFRNTCBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxpbmspXG4gICAgICAgICAgICBwcm9qZWN0Q29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgLy8gSGFuZGxlIGFueSBlcnJvcnNcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZzonLCBlcnIpO1xuICAgICAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZUhUTUwoZGF0YSwgbGluaykge1xuICAgIGxldCBodG1sID0gJyc7XG5cbiAgICBjb25zdCBkYXRhQXJyYXkgPSBbXTtcbiAgICBmb3IobGV0IGk9MDsgaTxkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGNvbnN0IGQgPSBkYXRhW2ldO1xuICAgICAgICBkYXRhQXJyYXkucHVzaChkYXRhW2ldKTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coZGF0YUFycmF5KTtcbiAgICAvLyBkYXRhQXJyYXlbMF0ucHJvamVjdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAvLyAgICAgaHRtbCArPSBgPGxpPiR7aXRlbS50aXRsZX08L2xpPmA7XG4gICAgLy8gfSlcblxuICAgIGRhdGFBcnJheS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coaXRlbS5wcm9qZWN0KVxuICAgIH0pXG5cblxuICAgIC8vIGlmKGxpbmsgPT0gJyNwcm9qZWN0Jykge1xuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhkYXRhQXJyYXkpXG4gICAgLy8gICAgIGRhdGFBcnJheVswXS5wcm9qZWN0Lm1hcCgoaXRlbSkgPT4ge1xuICAgIC8vICAgICAgICAgaHRtbCArPSBgPGxpPiR7aXRlbS50aXRsZX08L2xpPmA7XG4gICAgLy8gICAgIH0pXG4gICAgICAgIFxuICAgIC8vIH1cbiAgICBcbiAgICAvLyBpZihsaW5rID09ICcjYWJvdXQnKSB7XG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKGRhdGFBcnJheVsxXS5hYm91dC50ZXh0KVxuICAgIC8vICAgICBodG1sICs9IGA8bGk+JHtkYXRhQXJyYXlbMV0uYWJvdXQudGV4dH08L2xpPmA7XG4gICAgLy8gfVxuICAgIFxuICAgIC8vIGVsc2Uge1xuICAgIC8vICAgICBodG1sICs9ICcnXG4gICAgLy8gfVxuICAgIC8vIGZvcihsZXQgaXRlbSBvZiBkYXRhKSB7XG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGl0ZW0ucHJvamVjdClcbiAgICAvLyAgICAgLy8gaHRtbCArPSBgPGxpPiR7aXRlbS50aXRsZX08L2xpPmA7XG4gICAgLy8gfVxuICAgIHJldHVybiBodG1sO1xufVxuIl19
