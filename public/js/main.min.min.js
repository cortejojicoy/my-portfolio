function renderPageContent(e){const t=document.querySelectorAll(".content"),n=document.querySelector(".default");t.forEach(e=>{n?(n.style.display="none",n.classList.remove("default")):e.style.display="none"}),e.style.display="block"}function fetchItem(){return fetch("../data/main.json").then(e=>e.json()).catch(e=>{throw console.log("Error fetching data:",e),e})}function initialize(e){const t=document.getElementById("projectContainer");document.getElementById("aboutContainer");fetchItem().then(n=>{const o=generateHTML(n,e);console.log(e),t.innerHTML=o}).catch(e=>{console.error("Error initializing:",e)})}function generateHTML(e,t){const n=[];for(let t=0;t<e.length;t++)n.push(e[t]);return n.map(e=>{console.log(e.project)}),""}!function(){function e(e){e.preventDefault();const t=this.getAttribute("href").replace("#","");renderPageContent(document.querySelector(this.getAttribute("href"))),initialize(t)}document.querySelectorAll("#nav li a").forEach(t=>{t.addEventListener("click",e)})}(),document.addEventListener("DOMContentLoaded",function(){initialize(),fetchItem()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jb250ZW50LmpzIiwiX3NpZGViYXIuanMiLCJtYWluLmpzIiwiYXBpL2RhdGFTZXJ2aWNlLmpzIiwiYXBpL2ZldGNoU2VydmljZS5qcyJdLCJuYW1lcyI6WyJyZW5kZXJQYWdlQ29udGVudCIsInRhcmdldFNlY3Rpb24iLCJjb250ZW50RGl2cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImRlZmF1bHRTZWN0aW9uIiwicXVlcnlTZWxlY3RvciIsImZvckVhY2giLCJkaXYiLCJzdHlsZSIsImRpc3BsYXkiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJmZXRjaEl0ZW0iLCJmZXRjaCIsInRoZW4iLCJyZXMiLCJqc29uIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiaW5pdGlhbGl6ZSIsImxpbmsiLCJwcm9qZWN0Q29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJkYXRhIiwiaHRtbCIsImdlbmVyYXRlSFRNTCIsImlubmVySFRNTCIsImVycm9yIiwiZGF0YUFycmF5IiwiaSIsImxlbmd0aCIsInB1c2giLCJtYXAiLCJpdGVtIiwicHJvamVjdCIsImhhbmRsZUxpbmtDbGljayIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVIYXNoIiwidGhpcyIsImdldEF0dHJpYnV0ZSIsInJlcGxhY2UiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxrQkFBa0JDLEdBQ3ZCLE1BQU1DLEVBQWNDLFNBQVNDLGlCQUFpQixZQUN4Q0MsRUFBaUJGLFNBQVNHLGNBQWMsWUFFOUNKLEVBQVlLLFFBQVFDLElBRVpILEdBQ0FBLEVBQWVJLE1BQU1DLFFBQVUsT0FDL0JMLEVBQWVNLFVBQVVDLE9BQU8sWUFHaENKLEVBQUlDLE1BQU1DLFFBQVUsU0FXNUJULEVBQWNRLE1BQU1DLFFBQVUsUUEwQ2xDLFNBQVNHLFlBQ0wsT0FBT0MsTUFBTSxxQkFDUkMsS0FBS0MsR0FBT0EsRUFBSUMsUUFDaEJDLE1BQU1DLElBRUgsTUFEQUMsUUFBUUMsSUFBSSx1QkFBd0JGLEdBQzlCQSxJQU1sQixTQUFTRyxXQUFXQyxHQUNoQixNQUFNQyxFQUFtQnJCLFNBQVNzQixlQUFlLG9CQUMxQnRCLFNBQVNzQixlQUFlLGtCQUcvQ1osWUFDS0UsS0FBS1csSUFFRixNQUFNQyxFQUFPQyxhQUFhRixFQUFNSCxHQUVoQ0gsUUFBUUMsSUFBSUUsR0FDWkMsRUFBaUJLLFVBQVlGLElBRWhDVCxNQUFNQyxJQUVIQyxRQUFRVSxNQUFNLHNCQUF1QlgsS0FLakQsU0FBU1MsYUFBYUYsRUFBTUgsR0FHeEIsTUFBTVEsRUFBWSxHQUNsQixJQUFJLElBQUlDLEVBQUUsRUFBR0EsRUFBRU4sRUFBS08sT0FBUUQsSUFFeEJELEVBQVVHLEtBQUtSLEVBQUtNLElBZ0N4QixPQXpCQUQsRUFBVUksSUFBS0MsSUFDWGhCLFFBQVFDLElBQUllLEVBQUtDLFdBYlYsSUE5RGYsV0FhSSxTQUFTQyxFQUFnQkMsR0FDckJBLEVBQU1DLGlCQUVOLE1BQ01DLEVBRFlDLEtBQUtDLGFBQWEsUUFDUEMsUUFBUSxJQUFLLElBRzFDNUMsa0JBRHNCRyxTQUFTRyxjQUFjb0MsS0FBS0MsYUFBYSxVQUUvRHJCLFdBQVdtQixHQW5CTXRDLFNBQVNDLGlCQUFpQixhQU9sQ0csUUFBUWdCLElBQ2pCQSxFQUFLc0IsaUJBQWlCLFFBQVNQLEtBVnZDLEdBd0JBbkMsU0FBUzBDLGlCQUFpQixtQkFBb0IsV0FDMUN2QixhQUNBVCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiByZW5kZXJQYWdlQ29udGVudCh0YXJnZXRTZWN0aW9uKSB7XG4gICAgY29uc3QgY29udGVudERpdnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udGVudCcpO1xuICAgIGNvbnN0IGRlZmF1bHRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlZmF1bHQnKTtcbiAgICBcbiAgICBjb250ZW50RGl2cy5mb3JFYWNoKGRpdiA9PiB7XG5cbiAgICAgICAgaWYgKGRlZmF1bHRTZWN0aW9uKSB7XG4gICAgICAgICAgICBkZWZhdWx0U2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgZGVmYXVsdFNlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSgnZGVmYXVsdCcpO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBkaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGRpdi5nZXRBdHRyaWJ1dGUoJ2lkJykgPT09ICdwcm9qZWN0Jyk7XG4gICAgICAgIC8vIGlmKGRpdi5nZXRBdHRyaWJ1dGUoJ2lkJykgPT09ICdwcm9qZWN0Jykge1xuICAgICAgICAvLyAgICAgcmV0dXJuIGRpdi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgLy8gICAgIHJldHVybiBkaXYuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgLy8gfVxuICAgIH0pO1xuXG4gICAgdGFyZ2V0U2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBcbiAgICAvLyBTZXQgaW5pdGlhbCBkaXNwbGF5XG4gICAgLy8gY29uc3QgZGVmYXVsdFNlY3Rpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGVmYXVsdCcpO1xuICAgIC8vIGRlZmF1bHRTZWN0aW9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIC8vIEhpZGUgdGhlIGRlZmF1bHQgc2VjdGlvbiBpZiBpdCBoYXMgdGhlICdkZWZhdWx0JyBjbGFzc1xuICAgIC8vIGNvbnN0IGRlZmF1bHRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlZmF1bHQnKTtcbiAgICAvLyBpZiAoZGVmYXVsdFNlY3Rpb24pIHtcbiAgICAvLyAgICAgZGVmYXVsdFNlY3Rpb24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAvLyAgICAgZGVmYXVsdFNlY3Rpb24uY2xhc3NMaXN0LnJlbW92ZSgnZGVmYXVsdCcpO1xuICAgIC8vIH1cbn0iLCJpbXBvcnQgeyByZW5kZXJQYWdlQ29udGVudCB9IGZyb20gJy4vX2NvbnRlbnQuanMnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZSB9IGZyb20gJy4vYXBpL2ZldGNoU2VydmljZS5qcyc7XG5cbihmdW5jdGlvbigpIHtcbiAgICAvLyBjb25zdCBzaWRlYmFyTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2lkZWJhciBhJyk7XG4gICAgY29uc3Qgc2lkZWJhckxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI25hdiBsaSBhJyk7XG4gICAgLy8gY29uc3QgZGVmYXVsdExpbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnI2RlZmF1bHQnKTtcblxuICAgIC8vIGRlZmF1bHRMaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIC8vICAgICBkZWZhdWx0U2VjdGlvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAvLyB9KTtcblxuICAgIHNpZGViYXJMaW5rcy5mb3JFYWNoKGxpbmsgPT4ge1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlTGlua0NsaWNrKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUxpbmtDbGljayhldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaHJlZlZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlSGFzaCA9IGhyZWZWYWx1ZS5yZXBsYWNlKCcjJywgJycpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhocmVmVmFsdWUpO1xuICAgICAgICBjb25zdCB0YXJnZXRTZWN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpKTtcbiAgICAgICAgcmVuZGVyUGFnZUNvbnRlbnQodGFyZ2V0U2VjdGlvbik7XG4gICAgICAgIGluaXRpYWxpemUocmVtb3ZlSGFzaCk7XG4gICAgfVxufSkoKTsiLCJpbXBvcnQgeyBpbml0aWFsaXplIH0gZnJvbSAnLi9hcGkvZmV0Y2hTZXJ2aWNlJztcbmltcG9ydCB7IGZldGNoSXRlbSB9IGZyb20gJy4vYXBpL2RhdGFTZXJ2aWNlJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uKCl7XG4gICAgaW5pdGlhbGl6ZSgpO1xuICAgIGZldGNoSXRlbSgpO1xuICAgIC8vIGNvbnNvbGUubG9nKGZldGNoU2VydmljZSk7XG59KTsgIiwiXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hJdGVtKCkge1xuICAgIHJldHVybiBmZXRjaCgnLi4vZGF0YS9tYWluLmpzb24nKVxuICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZmV0Y2hpbmcgZGF0YTonLCBlcnIpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbn1cblxuIiwiXG5pbXBvcnQgeyBmZXRjaEl0ZW0gfSBmcm9tIFwiLi9kYXRhU2VydmljZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShsaW5rKSB7XG4gICAgY29uc3QgcHJvamVjdENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0Q29udGFpbmVyJyk7XG4gICAgY29uc3QgYWJvdXRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWJvdXRDb250YWluZXInKTtcblxuICAgIC8vIGNvbnNvbGUubG9nKGxpbmspXG4gICAgZmV0Y2hJdGVtKClcbiAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAvLyBQcm9jZXNzIHRoZSBKU09OIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBnZW5lcmF0ZUhUTUwoZGF0YSwgbGluayk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIEhUTUwgY29udGFpbmVyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhsaW5rKVxuICAgICAgICAgICAgcHJvamVjdENvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBhbnkgZXJyb3JzXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbml0aWFsaXppbmc6JywgZXJyKTtcbiAgICAgICAgfSk7XG59XG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVIVE1MKGRhdGEsIGxpbmspIHtcbiAgICBsZXQgaHRtbCA9ICcnO1xuXG4gICAgY29uc3QgZGF0YUFycmF5ID0gW107XG4gICAgZm9yKGxldCBpPTA7IGk8ZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBjb25zdCBkID0gZGF0YVtpXTtcbiAgICAgICAgZGF0YUFycmF5LnB1c2goZGF0YVtpXSk7XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKGRhdGFBcnJheSk7XG4gICAgLy8gZGF0YUFycmF5WzBdLnByb2plY3QubWFwKChpdGVtKSA9PiB7XG4gICAgLy8gICAgIGh0bWwgKz0gYDxsaT4ke2l0ZW0udGl0bGV9PC9saT5gO1xuICAgIC8vIH0pXG5cbiAgICBkYXRhQXJyYXkubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGl0ZW0ucHJvamVjdClcbiAgICB9KVxuXG5cbiAgICAvLyBpZihsaW5rID09ICcjcHJvamVjdCcpIHtcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coZGF0YUFycmF5KVxuICAgIC8vICAgICBkYXRhQXJyYXlbMF0ucHJvamVjdC5tYXAoKGl0ZW0pID0+IHtcbiAgICAvLyAgICAgICAgIGh0bWwgKz0gYDxsaT4ke2l0ZW0udGl0bGV9PC9saT5gO1xuICAgIC8vICAgICB9KVxuICAgICAgICBcbiAgICAvLyB9XG4gICAgXG4gICAgLy8gaWYobGluayA9PSAnI2Fib3V0Jykge1xuICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhkYXRhQXJyYXlbMV0uYWJvdXQudGV4dClcbiAgICAvLyAgICAgaHRtbCArPSBgPGxpPiR7ZGF0YUFycmF5WzFdLmFib3V0LnRleHR9PC9saT5gO1xuICAgIC8vIH1cbiAgICBcbiAgICAvLyBlbHNlIHtcbiAgICAvLyAgICAgaHRtbCArPSAnJ1xuICAgIC8vIH1cbiAgICAvLyBmb3IobGV0IGl0ZW0gb2YgZGF0YSkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhpdGVtLnByb2plY3QpXG4gICAgLy8gICAgIC8vIGh0bWwgKz0gYDxsaT4ke2l0ZW0udGl0bGV9PC9saT5gO1xuICAgIC8vIH1cbiAgICByZXR1cm4gaHRtbDtcbn1cbiJdLCJmaWxlIjoibWFpbi5taW4ubWluLmpzIn0=
